# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "crumgary/xubuntu-14.04lts-amd64-dev"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
     vb.gui = true
	 vb.cpus = 4
  #   # Customize the amount of memory on the VM:
	 vb.memory = "2048"
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    apt-get update
	apt-get purge -y thunderbird
    apt-get dist-upgrade -y
	apt-get install -y mc htop 
	apt-get install -y build-essential 
	apt-get install -y python3 python3-pip python-pip  
	apt-get install -y astyle cmake git doxygen
	apt-get install -y avarice
	apt-get install -y gdbserver
	
	pip install -U platformio
	platformio platform install atmelavr
	platformio lib --global install 1
    platformio lib --global install 13
    platformio lib --global install 81
    platformio lib --global install 73
    platformio lib --global install 433	

	mkdir /home/vagrant/unotest
	cd /home/vagrant/unotest
	platformio init --ide clion --board uno
	touch /home/vagrant/unotest/src/demo.cpp

	echo "#include <Arduino.h>" >> /home/vagrant/unotest/src/demo.cpp
	echo "void someFunction(int num);" >> /home/vagrant/unotest/src/demo.cpp
	echo "" >> /home/vagrant/unotest/src/demo.cpp
	echo "void setup () {" >> /home/vagrant/unotest/src/demo.cpp
	echo "    someFunction(13);" >> /home/vagrant/unotest/src/demo.cpp
	echo "}" >> /home/vagrant/unotest/src/demo.cpp
	echo "" >> /home/vagrant/unotest/src/demo.cpp
	echo "void loop() {" >> /home/vagrant/unotest/src/demo.cpp
	echo "    delay(1000);" >> /home/vagrant/unotest/src/demo.cpp
	echo "}" >> /home/vagrant/unotest/src/demo.cpp
	echo "" >> /home/vagrant/unotest/src/demo.cpp
	echo "void someFunction(int num) {" >> /home/vagrant/unotest/src/demo.cpp
	echo "}" >> /home/vagrant/unotest/src/demo.cpp
	
	platformio run

	sleep(1)
	echo "Install graphical tools ..."
	sleep(5)
	
	mkdir /home/vagrant/soft
	cd /home/vagrant/soft
	
	export DISPLAY=:0
	wget https://download.jetbrains.com/cpp/CLion-2016.2.2.tar.gz
    tar xzvf CLion-2016.2.2.tar.gz
	rm -f CLion-2016.2.2.tar.gz
	cd clion-2016.2.2
	cd bin
	./clion.sh
	
	
  SHELL
end
